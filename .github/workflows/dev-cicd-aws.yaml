name: istory ci/cd pipeline

permissions:
  contents: read
  security-events: write
  actions: read

on:
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  verify-pipeline:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: Ensure gradlew is executable
        run: chmod +x cloud-cicd-src/cwave-cicd-start/gradlew

      - name: List directory contents for debugging
        run: ls -al cloud-cicd-src/cwave-cicd-start

      - name: Build project with Gradle
        run: ./cloud-cicd-src/cwave-cicd-start/gradlew build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"
          output: sarif-results

      - name: Generate CodeQL Summary
        run: |
          echo "# 파이프라인 리포트" >> $GITHUB_STEP_SUMMARY
          echo "## 보안 경고" >> $GITHUB_STEP_SUMMARY
          
          if [ -f sarif-results/java.sarif ]; then
            if jq -e '.runs[0].results' sarif-results/java.sarif > /dev/null 2>&1; then
              ALERTS=$(jq '.runs[].results | length' sarif-results/java.sarif)
              echo "${ALERTS}개의 잠재적인 보안 이슈가 발견 되었습니다." >> $GITHUB_STEP_SUMMARY
              
              echo "### 보안 경고 상세" >> $GITHUB_STEP_SUMMARY
              echo "| Severity | Rule | Description | File |" >> $GITHUB_STEP_SUMMARY
              echo "|----------|------|-------------|------|" >> $GITHUB_STEP_SUMMARY
              
              jq -r '.runs[].results[] | "| \(.properties.security_severity // "medium") | \(.ruleId // "N/A") | \(.message.text // "N/A") | \(.locations[0].physicalLocation.artifactLocation.uri):\(.locations[0].physicalLocation.region.startLine) |"' sarif-results/java.sarif >> $GITHUB_STEP_SUMMARY || true
            else
              echo "No results found in SARIF file." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No SARIF results file found." >> $GITHUB_STEP_SUMMARY

  build-and-upload:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Change application.yml
        run: |
          cat > src/main/resources/application.yml << EOF
          spring:
            datasource:
              url: ${{ secrets.DATABASE_URL }}
              username: ${{ secrets.MYSQL_USERNAME }}
              password: ${{ secrets.MYSQL_PASSWORD }}
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              database-platform: org.hibernate.dialect.MySQL8Dialect
              hibernate:
                ddl-auto: update
              show-sql: true
            application:
              name: USER-SERVICE
            jwt:
              issuer: user@gmail.com
              secret_key: study-springboot
          management:
            endpoints:
              web:
                exposure:
                  include: health,info
            endpoint:
              health:
                show-details: always
          EOF
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: 실행가능한 JAR 빌드
        run: |
          chmod +x gradlew
          ./gradlew bootJar
          
      - name: 아티패트 이름 만들기
        run: |
          echo "ARTIFACT_NAME=springboot-$(date +'%Y%m%d-%H%M%S').jar" >> $GITHUB_ENV

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp build/libs/*.jar deployment/${{ env.ARTIFACT_NAME }}
          cp appspec.yml deployment/
          cp -r scripts deployment/
          cd deployment && zip -r ../deploy.zip .          

      - name: Upload to S3
        run: |
          aws s3 cp deployment/${{ env.ARTIFACT_NAME }} s3://${{ secrets.AWS_S3_BUCKET }}/artifacts/
          aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_BUCKET }}/deploy/deploy.zip
